import pandas as pd
import oracledb

USERNAME = 'DEIASSMVP'
PASSWORD = 'Kp51xVic'
HOST = '107.104.192.121'
PORT = '60493'
SID = 'odis1ass'  # Cambiado de SERVICE_NAME a SID
EXCEL_FILE = 'C:/Users/x919989/SOURCES/ScriptVictorRuiz/Excels/ACC_USERS_REGISTERED 1.xlsx'
TABLE_NAME = 'ACC_USERS_REGISTERED'
COLUMNS = ['USER_ID', 'USER_NAME', 'USER_SURNAME', 'ACTIVE']
EXCLUDE_COLUMN = None
EXCLUDE_VALUES = None

def main():
    try:
        print("Leyendo Excel...")
        df = pd.read_excel(EXCEL_FILE, engine='openpyxl')
        
        if COLUMNS:
            df = df[COLUMNS]
            column_list = COLUMNS
        else:
            column_list = list(df.columns)
        
        print(f"Total filas en Excel: {len(df)}")
        print(f"Columnas a insertar: {column_list}")
        
        if EXCLUDE_COLUMN and EXCLUDE_VALUES:
            df = df[~df[EXCLUDE_COLUMN].isin(EXCLUDE_VALUES)]
            print(f"Filas después de filtrar: {len(df)}")
        
        print("Conectando a Oracle...")
        
        # CORRECCIÓN 1: Usar SID en lugar de service_name
        try:
            # Método 1: makedsn con SID
            dsn = oracledb.makedsn(HOST, PORT, sid=SID)  # sid= en lugar de service_name=
            connection = oracledb.connect(user=USERNAME, password=PASSWORD, dsn=dsn)
            print("✓ Conectado exitosamente usando SID")
        except Exception as e:
            print(f"Error con makedsn: {e}")
            try:
                # Método 2: DSN string manual con SID
                dsn_string = f"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST={HOST})(PORT={PORT}))(CONNECT_DATA=(SID={SID})))"
                connection = oracledb.connect(user=USERNAME, password=PASSWORD, dsn=dsn_string)
                print("✓ Conectado exitosamente usando DSN string con SID")
            except Exception as e2:
                print(f"Error con DSN string: {e2}")
                # Método 3: Formato directo
                connection = oracledb.connect(f"{USERNAME}/{PASSWORD}@{HOST}:{PORT}:{SID}")
                print("✓ Conectado exitosamente usando formato directo")
        
        cursor = connection.cursor()
        
        # Verificar conexión
        cursor.execute("SELECT USER FROM DUAL")
        print(f"Conectado como: {cursor.fetchone()[0]}")
        
        # CORRECCIÓN 2: Sintaxis correcta del MERGE
        placeholders = ', '.join([f':{i+1}' for i in range(len(column_list))])
        column_names = ', '.join(column_list)
        
        # Crear la parte del SELECT con alias de columnas
        select_list = ', '.join([f':{i+1} as {col}' for i, col in enumerate(column_list)])
        
        # SQL con sintaxis correcta
        sql = f"""MERGE INTO {TABLE_NAME} t 
                  USING (SELECT {select_list} FROM dual) s 
                  ON (t.USER_ID = s.USER_ID) 
                  WHEN NOT MATCHED THEN 
                  INSERT ({column_names}) VALUES ({placeholders})"""
        
        print("\nSQL a ejecutar:")
        print(sql)
        print("\nInsertando datos...")
        
        inserted = 0
        duplicated = 0
        errors = 0
        
        for index, row in df.iterrows():
            try:
                values = [None if pd.isna(val) else val for val in row.values]
                cursor.execute(sql, values)
                inserted += 1
                if (index + 1) % 50 == 0:
                    print(f"  Procesadas {index + 1} filas...")
            except oracledb.Error as e:
                error, = e.args
                if error.code == 1:  # ORA-00001: unique constraint violated
                    duplicated += 1
                else:
                    errors += 1
                    if errors <= 3:  # Mostrar solo los primeros 3 errores
                        print(f"Error en fila {index + 1}: {error.message}")
                        print(f"  Valores: {values}")
            except Exception as e:
                errors += 1
                print(f"Error inesperado en fila {index + 1}: {e}")
        
        connection.commit()
        cursor.close()
        connection.close()
        
        print(f"\n=== RESUMEN ===")
        print(f"✓ Insertadas: {inserted} filas")
        print(f"⚠ Duplicadas: {duplicated} filas")
        print(f"✗ Errores: {errors} filas")
        print(f"Total procesadas: {inserted + duplicated + errors} de {len(df)}")
        
    except Exception as e:
        print(f"\nError general: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
