import pandas as pd
import oracledb

USERNAME = 'DEIASSMVP'
PASSWORD = 'Kp51xVic'
HOST = '107.104.192.121'
PORT = '60493'
SERVICE_NAME = 'odis1ass'
EXCEL_FILE = 'C:/Users/x919989/SOURCES/ScriptVictorRuiz/Excels/ACC_USERS_REGISTERED 1.xlsx'
TABLE_NAME = 'ACC_USERS_REGISTERED'
COLUMNS = ['USER_ID', 'USER_NAME', 'USER_SURNAME', 'ACTIVE']
EXCLUDE_COLUMN = None
EXCLUDE_VALUES = None

def main():
    try:
        print("Leyendo Excel...")
        df = pd.read_excel(EXCEL_FILE, engine='openpyxl')
        
        if COLUMNS:
            df = df[COLUMNS]
            column_list = COLUMNS
        else:
            column_list = list(df.columns)
        
        print(f"Total filas en Excel: {len(df)}")
        print(f"Columnas a insertar: {column_list}")
        
        if EXCLUDE_COLUMN and EXCLUDE_VALUES:
            df = df[~df[EXCLUDE_COLUMN].isin(EXCLUDE_VALUES)]
            print(f"Filas después de filtrar: {len(df)}")
        
        print("Conectando a Oracle...")
        try:
            connection = oracledb.connect(
                user=USERNAME,
                password=PASSWORD,
                host=HOST,
                port=int(PORT),
                service_name=SERVICE_NAME  # Cambiado de 'sid' a 'service_name'
            )
        except Exception as e:
            print(f"Error de conexión: {e}")
            print("Intentando con formato DSN...")
            dsn = oracledb.makedsn(HOST, PORT, service_name=SERVICE_NAME)
            connection = oracledb.connect(user=USERNAME, password=PASSWORD, dsn=dsn)
        
        cursor = connection.cursor()
        
        # AQUÍ ESTÁ LA CORRECCIÓN CLAVE
        # Crear los placeholders con alias para el USING
        placeholders = ', '.join([f':{i+1}' for i in range(len(column_list))])
        column_names = ', '.join(column_list)
        
        # Crear la parte del SELECT con alias de columnas
        select_list = ', '.join([f':{i+1} as {col}' for i, col in enumerate(column_list)])
        
        # SQL corregido - nota cómo ahora s.USER_ID se refiere al alias de columna, no al bind parameter
        sql = f"""MERGE INTO {TABLE_NAME} t 
                  USING (SELECT {select_list} FROM dual) s 
                  ON (t.USER_ID = s.USER_ID) 
                  WHEN NOT MATCHED THEN 
                  INSERT ({column_names}) VALUES ({placeholders})"""
        
        print("SQL generado:")
        print(sql)
        print("\nInsertando datos...")
        
        inserted = 0
        for index, row in df.iterrows():
            try:
                values = [None if pd.isna(val) else val for val in row.values]
                cursor.execute(sql, values)
                inserted += 1
                if (index + 1) % 50 == 0:
                    print(f"  Procesadas {index + 1} filas...")
            except Exception as e:
                if "ORA-00001" in str(e):
                    print(f"Fila {index + 1}: Registro duplicado, saltando...")
                else:
                    print(f"Error en fila {index + 1}: {e}")
                    # Si hay error, mostrar los valores para debug
                    if index < 3:  # Solo mostrar los primeros 3 errores con detalle
                        print(f"  Valores: {values}")
        
        connection.commit()
        cursor.close()
        connection.close()
        
        print(f"\n¡Completado! Insertadas {inserted} filas de {len(df)} totales")
        
    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
